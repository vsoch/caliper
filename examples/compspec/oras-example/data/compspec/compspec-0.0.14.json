{
    "0.0.14": {
        "oras.defaults": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.defaults.__author__",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright 2021-2022, Vanessa Sochat\"",
                "fullname": "examples.compspec.defaults.__copyright__",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.defaults.__license__",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "default_tag = \"latest\"",
                "fullname": "examples.compspec.defaults.default_tag",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class registry",
                "fullname": "examples.compspec.defaults.registry",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "registry()"
            },
            {
                "description": "default_blob_dir_media_type = \"application/vnd.oci.image.layer.v1.tar+gzip\"",
                "fullname": "examples.compspec.defaults.default_blob_dir_media_type",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "default_blob_media_type = \"application/vnd.oci.image.layer.v1.tar\"",
                "fullname": "examples.compspec.defaults.default_blob_media_type",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "unknown_config_media_type = \"application/vnd.unknown.config.v1+json\"",
                "fullname": "examples.compspec.defaults.unknown_config_media_type",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "default_manifest_media_type = \"application/vnd.oci.image.manifest.v1+json\"",
                "fullname": "examples.compspec.defaults.default_manifest_media_type",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "annotation_digest = \"io.deis.oras.content.digest\"",
                "fullname": "examples.compspec.defaults.annotation_digest",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "annotation_title = \"org.opencontainers.image.title\"",
                "fullname": "examples.compspec.defaults.annotation_title",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "annotation_unpack = \"io.deis.oras.content.unpack\"",
                "fullname": "examples.compspec.defaults.annotation_unpack",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "oci_image_index_file = \"index.json\"",
                "fullname": "examples.compspec.defaults.oci_image_index_file",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "default_blocksize = 32768",
                "fullname": "examples.compspec.defaults.default_blocksize",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "blank_hash = \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"",
                "fullname": "examples.compspec.defaults.blank_hash",
                "modulename": "examples.compspec.defaults",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/defaults.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.schemas": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.schemas.__author__",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.schemas.__copyright__",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.schemas.__license__",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "schema_url = \"http://json-schema.org/draft-07/schema\"",
                "fullname": "examples.compspec.schemas.schema_url",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "annotations = { \"type\": \"object\", \"patternProperties\": { \"\\\\w[\\\\w-]*\": {\"type\": \"string\"}, }, }",
                "fullname": "examples.compspec.schemas.annotations",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "layerProperties = { \"type\": \"object\", \"properties\": { \"mediaType\": {\"type\": \"string\"}, \"size\": {\"type\": \"number\"}, \"digest\": {\"type\": \"string\"}, \"annotations\": annotations, }, }",
                "fullname": "examples.compspec.schemas.layerProperties",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "layer = { \"$schema\": schema_url, \"title\": \"Layer Schema\", \"required\": [ \"mediaType\", \"size\", \"digest\", ], \"additionalProperties\": False, }",
                "fullname": "examples.compspec.schemas.layer",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "manifestProperties = { \"schemaVersion\": {\"type\": \"number\"}, \"mediaType\": {\"type\": \"string\"}, \"layers\": {\"type\": \"array\", \"items\": layerProperties}, \"config\": layerProperties, \"annotations\": annotations, }",
                "fullname": "examples.compspec.schemas.manifestProperties",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "manifest = { \"$schema\": schema_url, \"title\": \"Manifest Schema\", \"type\": \"object\", \"required\": [ \"schemaVersion\", \"config\", \"layers\", ], \"properties\": manifestProperties, \"additionalProperties\": False, }",
                "fullname": "examples.compspec.schemas.manifest",
                "modulename": "examples.compspec.schemas",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/schemas.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.container": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.container.__author__",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.container.__copyright__",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.container.__license__",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module re",
                "fullname": "re",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'."
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "docker_regex = re.compile( \"(?:(?P<registry>[^/@]+[.:][^/@]*)/)?\" \"(?P<namespace>(?:[^:@/]+/)+)?\" \"(?P<repository>[^:@/]+)\" \"(?::(?P<tag>[^:@]+))?\" \"(?:@(?P<digest>.+))?\" \"$\" )",
                "fullname": "examples.compspec.container.docker_regex",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Container",
                "fullname": "examples.compspec.container.Container",
                "modulename": "examples.compspec.container",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/container.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Container(name: str, registry: Optional[str]=None)",
                "parameters": [
                    {
                        "name": "name",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.container.Container"
                    },
                    {
                        "name": "registry",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.container.Container",
                        "docstring": "NoneType()"
                    }
                ]
            }
        ],
        "oras.oci": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.oci.__author__",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.oci.__copyright__",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.oci.__license__",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module copy",
                "fullname": "copy",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Generic (shallow and deep) copying operations.\n\nInterface summary:\n\n        import copy\n\n        x = copy.copy(y)        # make a shallow copy of y\n        x = copy.deepcopy(y)    # make a deep copy of y\n\nFor module specific errors, copy.Error is raised.\n\nThe difference between shallow and deep copying is only relevant for\ncompound objects (objects that contain other objects, like lists or\nclass instances).\n\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\n\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n\n b) because deep copy copies *everything* it may copy too much, e.g.\n    administrative data structures that should be shared even between\n    copies\n\nPython's deep copy operation avoids these problems by:\n\n a) keeping a table of objects already copied during the current\n    copying pass\n\n b) letting user-defined classes override the copying operation or the\n    set of components copied\n\nThis version does not copy types like module, class, function, method,\nnor stack trace, stack frame, nor file, socket, window, nor any\nsimilar types.\n\nClasses can use the same interfaces to control copying that they use\nto control pickling: they can define methods called __getinitargs__(),\n__getstate__() and __setstate__().  See the documentation for module\n\"pickle\" for information on these methods."
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "class Dict",
                "fullname": "typing.Dict",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "dict(**kwargs: _VT)\ndict(map: Mapping[_KT, _VT], **kwargs: _VT)\ndict(iterable: Iterable[Tuple[_KT, _VT]], **kwargs: _VT)",
                "parameters": [
                    {
                        "name": "kwargs",
                        "type": "param",
                        "kind": "VAR_KEYWORD",
                        "order": 4,
                        "signature": "builtins.dict"
                    },
                    {
                        "name": "map",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.dict"
                    },
                    {
                        "name": "kwargs",
                        "type": "param",
                        "kind": "VAR_KEYWORD",
                        "order": 4,
                        "signature": "builtins.dict"
                    },
                    {
                        "name": "iterable",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.dict"
                    },
                    {
                        "name": "kwargs",
                        "type": "param",
                        "kind": "VAR_KEYWORD",
                        "order": 4,
                        "signature": "builtins.dict"
                    }
                ]
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Tuple",
                "fullname": "typing.Tuple",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Tuple()"
            },
            {
                "description": "module jsonschema",
                "fullname": "jsonschema",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "EmptyManifest = { \"schemaVersion\": 2, \"mediaType\": oras.defaults.default_manifest_media_type, \"config\": {}, \"layers\": [], \"annotations\": {}, }",
                "fullname": "examples.compspec.oci.EmptyManifest",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Annotations",
                "fullname": "examples.compspec.oci.Annotations",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Annotations(filename=None)\n\nCreate a new set of annotations",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.Annotations",
                        "docstring": "NoneType()"
                    }
                ]
            },
            {
                "description": "class Layer",
                "fullname": "examples.compspec.oci.Layer",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Layer(blob_path: str, media_type: Optional[str]=None, is_dir: bool=False)",
                "parameters": [
                    {
                        "name": "blob_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.Layer"
                    },
                    {
                        "name": "media_type",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.Layer",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "is_dir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.Layer"
                    }
                ]
            },
            {
                "description": "def NewLayer",
                "fullname": "examples.compspec.oci.NewLayer",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "NewLayer(blob_path: str, media_type: Optional[str]=None, is_dir: bool=False) -> dict\n\nCourtesy function to create and retrieve a layer as dict\n\n:param blob_path: the path of the blob for the layer\n:type blob_path: str\n:param media_type: media type for the blob (optional)\n:type media_type: str\n:param is_dir: is the blob a directory?\n:type is_dir: bool",
                "parameters": [
                    {
                        "name": "blob_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.NewLayer"
                    },
                    {
                        "name": "media_type",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.NewLayer",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "is_dir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.NewLayer"
                    }
                ]
            },
            {
                "description": "def ManifestConfig",
                "fullname": "examples.compspec.oci.ManifestConfig",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "ManifestConfig(path: str=None, media_type: str=None) -> Tuple[Dict[str, object], str]\n\nWrite an empty config, if one is not provided\n\n:param path: the path of the manifest config, if exists.\n:type path: str\n:param media_type: media type for the manifest config (optional)\n:type media_type: str",
                "parameters": [
                    {
                        "name": "path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.ManifestConfig"
                    },
                    {
                        "name": "media_type",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.oci.ManifestConfig"
                    }
                ]
            },
            {
                "description": "def NewManifest",
                "fullname": "examples.compspec.oci.NewManifest",
                "modulename": "examples.compspec.oci",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/oci.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "NewManifest() -> dict\n\nGet an empty manifest config."
            }
        ],
        "oras.auth": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.auth.__author__",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.auth.__copyright__",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.auth.__license__",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module base64",
                "fullname": "base64",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings"
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module re",
                "fullname": "re",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'."
            },
            {
                "description": "class List",
                "fullname": "typing.List",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "list()\nlist(iterable: Iterable[_T])",
                "parameters": [
                    {
                        "name": "iterable",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.list"
                    }
                ]
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def load_configs",
                "fullname": "examples.compspec.auth.load_configs",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "load_configs(configs: Optional[List[str]]=None)\n\nLoad one or more configs with credentials from the filesystem.\n\n:param configs: list of configuration paths to load, defaults to None\n:type configs: optional list",
                "parameters": [
                    {
                        "name": "configs",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.auth.load_configs",
                        "docstring": "NoneType()"
                    }
                ]
            },
            {
                "description": "def get_basic_auth",
                "fullname": "examples.compspec.auth.get_basic_auth",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_basic_auth(username: str, password: str)\n\nPrepare basic auth from a username and password.\n\n:param username: the user account name\n:type username: str\n:param password: the user account password\n:type password: str",
                "parameters": [
                    {
                        "name": "username",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.auth.get_basic_auth"
                    },
                    {
                        "name": "password",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.auth.get_basic_auth"
                    }
                ]
            },
            {
                "description": "class authHeader",
                "fullname": "examples.compspec.auth.authHeader",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "authHeader(lookup: dict)",
                "parameters": [
                    {
                        "name": "lookup",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.auth.authHeader"
                    }
                ]
            },
            {
                "description": "def parse_auth_header",
                "fullname": "examples.compspec.auth.parse_auth_header",
                "modulename": "examples.compspec.auth",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/auth.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "parse_auth_header(authHeaderRaw: str) -> authHeader\n\nParse authentication header into pieces\n\n:param username: the user account name\n:type username: str\n:param password: the user account password\n:type password: str",
                "parameters": [
                    {
                        "name": "authHeaderRaw",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.auth.parse_auth_header"
                    }
                ]
            }
        ],
        "oras.client": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.client.__author__",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.client.__copyright__",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.client.__license__",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "class List",
                "fullname": "typing.List",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "list()\nlist(iterable: Iterable[_T])",
                "parameters": [
                    {
                        "name": "iterable",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.list"
                    }
                ]
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Union",
                "fullname": "typing.Union",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module main",
                "fullname": "oras.main",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class OrasClient",
                "fullname": "examples.compspec.client.OrasClient",
                "modulename": "examples.compspec.client",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/client.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OrasClient(hostname: Optional[str]=None, registry: Optional[oras.provider.Registry]=None, insecure: bool=False)\n\nCreate an OCI Registry as Storage (ORAS) Client.\n\nThis is intended for controlled interactions. The user of oras-py can use\nthis client, the terminal command line wrappers, or the functions in main\nin isolation as an internal Python API. The user can provide a custom\nregistry as a parameter, if desired. If not provided we default to standard\noras.",
                "parameters": [
                    {
                        "name": "hostname",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.client.OrasClient",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "registry",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.client.OrasClient",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "insecure",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.client.OrasClient"
                    }
                ]
            }
        ],
        "oras": [
            {
                "description": "module __version__",
                "fullname": "oras.version.__version__",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.version": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.version.__author__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.version.__copyright__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.version.__license__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__version__ = \"0.0.14\"",
                "fullname": "examples.compspec.version.__version__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "AUTHOR = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.version.AUTHOR",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "EMAIL = \"vsoch@users.noreply.github.com\"",
                "fullname": "examples.compspec.version.EMAIL",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "NAME = \"oras\"",
                "fullname": "examples.compspec.version.NAME",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "PACKAGE_URL = \"https://github.com/oras-project/oras-python\"",
                "fullname": "examples.compspec.version.PACKAGE_URL",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "KEYWORDS = \"oci, registry, storage\"",
                "fullname": "examples.compspec.version.KEYWORDS",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "DESCRIPTION = \"OCI Registry as Storage Python client\"",
                "fullname": "examples.compspec.version.DESCRIPTION",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "LICENSE = \"LICENSE\"",
                "fullname": "examples.compspec.version.LICENSE",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "INSTALL_REQUIRES = ( (\"jsonschema\", {\"min_version\": None}), (\"requests\", {\"min_version\": None}), )",
                "fullname": "examples.compspec.version.INSTALL_REQUIRES",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "TESTS_REQUIRES = ( (\"pytest\", {\"min_version\": \"4.6.2\"}), (\"mypy\", {\"min_version\": None}), (\"pyflakes\", {\"min_version\": None}), (\"black\", {\"min_version\": None}), (\"types-requests\", {\"min_version\": None}), (\"isort\", {\"min_version\": None}), )",
                "fullname": "examples.compspec.version.TESTS_REQUIRES",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "DOCKER_REQUIRES = ((\"docker\", {\"exact_version\": \"5.0.1\"}),)",
                "fullname": "examples.compspec.version.DOCKER_REQUIRES",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "INSTALL_REQUIRES_ALL = INSTALL_REQUIRES + TESTS_REQUIRES + DOCKER_REQUIRES",
                "fullname": "examples.compspec.version.INSTALL_REQUIRES_ALL",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.provider": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.provider.__author__",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.provider.__copyright__",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.provider.__license__",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module copy",
                "fullname": "copy",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Generic (shallow and deep) copying operations.\n\nInterface summary:\n\n        import copy\n\n        x = copy.copy(y)        # make a shallow copy of y\n        x = copy.deepcopy(y)    # make a deep copy of y\n\nFor module specific errors, copy.Error is raised.\n\nThe difference between shallow and deep copying is only relevant for\ncompound objects (objects that contain other objects, like lists or\nclass instances).\n\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\n\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n\n b) because deep copy copies *everything* it may copy too much, e.g.\n    administrative data structures that should be shared even between\n    copies\n\nPython's deep copy operation avoids these problems by:\n\n a) keeping a table of objects already copied during the current\n    copying pass\n\n b) letting user-defined classes override the copying operation or the\n    set of components copied\n\nThis version does not copy types like module, class, function, method,\nnor stack trace, stack frame, nor file, socket, window, nor any\nsimilar types.\n\nClasses can use the same interfaces to control copying that they use\nto control pickling: they can define methods called __getinitargs__(),\n__getstate__() and __setstate__().  See the documentation for module\n\"pickle\" for information on these methods."
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "class List",
                "fullname": "typing.List",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "list()\nlist(iterable: Iterable[_T])",
                "parameters": [
                    {
                        "name": "iterable",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.list"
                    }
                ]
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Tuple",
                "fullname": "typing.Tuple",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Tuple()"
            },
            {
                "description": "class Union",
                "fullname": "typing.Union",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module jsonschema",
                "fullname": "jsonschema",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module requests",
                "fullname": "requests",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Requests HTTP Library\n~~~~~~~~~~~~~~~~~~~~~\n\nRequests is an HTTP library, written in Python, for human beings.\nBasic GET usage:\n\n   >>> import requests\n   >>> r = requests.get('https://www.python.org')\n   >>> r.status_code\n   200\n   >>> b'Python is a programming language' in r.content\n   True\n\n... or POST:\n\n   >>> payload = dict(key1='value1', key2='value2')\n   >>> r = requests.post('https://httpbin.org/post', data=payload)\n   >>> print(r.text)\n   {\n     ...\n     \"form\": {\n       \"key1\": \"value1\",\n       \"key2\": \"value2\"\n     },\n     ...\n   }\n\nThe other HTTP methods are supported - see `requests.api`. Full documentation\nis at <https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details."
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module ensure_container",
                "fullname": "oras.decorator.ensure_container",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Registry",
                "fullname": "examples.compspec.provider.Registry",
                "modulename": "examples.compspec.provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/provider.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Registry(hostname: Optional[str]=None, insecure: bool=False)\n\nDirect interactions with an OCI registry.\n\nThis could also be called a \"provider\" when we add in the \"copy\" logic\nand the registry isn't necessarily the \"remote\" endpoint.",
                "parameters": [
                    {
                        "name": "hostname",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.provider.Registry",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "insecure",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.provider.Registry"
                    }
                ]
            }
        ],
        "oras.logger": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.logger.__author__",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.logger.__copyright__",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.logger.__license__",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module inspect",
                "fullname": "inspect",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python 3 features\n    formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n\n    signature() - get a Signature object for the callable"
            },
            {
                "description": "module _logging",
                "fullname": "logging",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Logging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.\n\nCopyright (C) 2001-2019 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!"
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module platform",
                "fullname": "platform",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module tries to retrieve as much platform-identifying data as\npossible. It makes this information available via function APIs.\n\nIf called from the command line, it prints the platform\ninformation concatenated as single string to stdout. The output\nformat is useable as part of a filename."
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "module threading",
                "fullname": "threading",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Thread module emulating a subset of Java's threading model."
            },
            {
                "description": "class Path",
                "fullname": "pathlib.Path",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Path()\n\nPurePath subclass that can make system calls.\n\nPath represents a filesystem path but unlike PurePath, also offers\nmethods to do system calls on path objects. Depending on your system,\ninstantiating a Path will return either a PosixPath or a WindowsPath\nobject. You can also instantiate a PosixPath or WindowsPath directly,\nbut cannot instantiate a WindowsPath on a POSIX system or vice versa."
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class Text",
                "fullname": "typing.Text",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "str(o: object=...)\nstr(o: bytes, encoding: str=..., errors: str=...)\n\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
                "parameters": [
                    {
                        "name": "o",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.str"
                    },
                    {
                        "name": "o",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.str"
                    },
                    {
                        "name": "encoding",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.str"
                    },
                    {
                        "name": "errors",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "builtins.str"
                    }
                ]
            },
            {
                "description": "class TextIO",
                "fullname": "typing.TextIO",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "TextIO()\n\nTyped version of the return of open() in text mode."
            },
            {
                "description": "class Union",
                "fullname": "typing.Union",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class ColorizingStreamHandler",
                "fullname": "examples.compspec.logger.ColorizingStreamHandler",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "ColorizingStreamHandler(nocolor: bool=False, stream: Union[Text, Path, TextIO]=sys.stderr, use_threads: bool=False)",
                "parameters": [
                    {
                        "name": "nocolor",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.ColorizingStreamHandler"
                    },
                    {
                        "name": "stream",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.ColorizingStreamHandler"
                    },
                    {
                        "name": "use_threads",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.ColorizingStreamHandler"
                    }
                ]
            },
            {
                "description": "class Logger",
                "fullname": "examples.compspec.logger.Logger",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Logger()"
            },
            {
                "description": "logger = Logger()",
                "fullname": "examples.compspec.logger.logger",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def setup_logger",
                "fullname": "examples.compspec.logger.setup_logger",
                "modulename": "examples.compspec.logger",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logger.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "setup_logger(quiet: bool=False, printshellcmds: bool=False, nocolor: bool=False, stdout: bool=False, debug: bool=False, use_threads: bool=False)\n\nSetup the logger. This should be called from an init or client.\n\n:param quiet: set logging level to quiet\n:type quiet: bool\n:param printshellcmds: a special level to print shell commands\n:type printshellcmds: bool\n:param nocolor: do not use color\n:type nocolor: bool\n:param stdout: print to standard output for the logger\n:type stdout: bool\n:param debug: debug level logging\n:type debug: bool\n:param use_threads: use threads!\n:type use_threads: bool",
                "parameters": [
                    {
                        "name": "quiet",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    },
                    {
                        "name": "printshellcmds",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    },
                    {
                        "name": "nocolor",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    },
                    {
                        "name": "stdout",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    },
                    {
                        "name": "debug",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    },
                    {
                        "name": "use_threads",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logger.setup_logger"
                    }
                ]
            }
        ],
        "oras.decorator": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.decorator.__author__",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.decorator.__copyright__",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.decorator.__license__",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class partial",
                "fullname": "functools.partial",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "partial(func: Callable[..., _T], *args: Any, **kwargs: Any)\n\npartial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.\n------------------------------\nNew function with partial application of the given arguments\nand keywords.",
                "parameters": [
                    {
                        "name": "func",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "functools.partial"
                    },
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "VAR_POSITIONAL",
                        "order": 2,
                        "signature": "functools.partial"
                    },
                    {
                        "name": "kwargs",
                        "type": "param",
                        "kind": "VAR_KEYWORD",
                        "order": 4,
                        "signature": "functools.partial"
                    }
                ]
            },
            {
                "description": "def update_wrapper",
                "fullname": "functools.update_wrapper",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "update_wrapper(wrapper: _AnyCallable, wrapped: _AnyCallable, assigned: Sequence[str]=..., updated: Sequence[str]=...) -> _AnyCallable\n\nUpdate a wrapper function to look like the wrapped function\n\nwrapper is the function to be updated\nwrapped is the original function\nassigned is a tuple naming the attributes assigned directly\nfrom the wrapped function to the wrapper function (defaults to\nfunctools.WRAPPER_ASSIGNMENTS)\nupdated is a tuple naming the attributes of the wrapper that\nare updated with the corresponding attribute from the wrapped\nfunction (defaults to functools.WRAPPER_UPDATES)",
                "parameters": [
                    {
                        "name": "wrapper",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "functools.update_wrapper"
                    },
                    {
                        "name": "wrapped",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "functools.update_wrapper"
                    },
                    {
                        "name": "assigned",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "functools.update_wrapper"
                    },
                    {
                        "name": "updated",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "functools.update_wrapper"
                    }
                ]
            },
            {
                "description": "class ensure_container",
                "fullname": "examples.compspec.decorator.ensure_container",
                "modulename": "examples.compspec.decorator",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/decorator.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "ensure_container(func)\n\nEnsure the first argument is a container, and not a string.",
                "parameters": [
                    {
                        "name": "func",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.decorator.ensure_container"
                    }
                ]
            }
        ],
        "oras.cli.shell": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.shell.__author__",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.shell.__copyright__",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.shell.__license__",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.shell.main",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.main"
                    }
                ]
            },
            {
                "description": "def create_client",
                "fullname": "examples.compspec.shell.create_client",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "create_client(args)",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.create_client"
                    }
                ]
            },
            {
                "description": "def ipython",
                "fullname": "examples.compspec.shell.ipython",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "ipython(args)\n\nGenerate an IPython shell with the client.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.ipython"
                    }
                ]
            },
            {
                "description": "def bpython",
                "fullname": "examples.compspec.shell.bpython",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "bpython(args)\n\nGenerate an bpython shell with the client.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.bpython"
                    }
                ]
            },
            {
                "description": "def python",
                "fullname": "examples.compspec.shell.python",
                "modulename": "examples.compspec.shell",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/shell.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "python(args)\n\nGenerate an python shell with the client.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.shell.python"
                    }
                ]
            }
        ],
        "oras.cli": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.__author__",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.__copyright__",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.__license__",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module argparse",
                "fullname": "argparse",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)"
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module help",
                "fullname": "oras.cli.help",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module setup_logger",
                "fullname": "oras.logger.setup_logger",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def get_parser",
                "fullname": "examples.compspec.get_parser",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_parser()"
            },
            {
                "description": "def run",
                "fullname": "examples.compspec.run",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "run()\n\nEntrypoint to ORAS Python"
            }
        ],
        "oras.cli.push": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.push.__author__",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.push.__copyright__",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.push.__license__",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def load_manifest_annotations",
                "fullname": "examples.compspec.push.load_manifest_annotations",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "load_manifest_annotations(annotation_file, annotations)\n\nDisambiguate annotations.",
                "parameters": [
                    {
                        "name": "annotation_file",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.load_manifest_annotations"
                    },
                    {
                        "name": "annotations",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.load_manifest_annotations"
                    }
                ]
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.push.main",
                "modulename": "examples.compspec.push",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/push.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)\n\nA wrapper around an oras client push.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.push.main"
                    }
                ]
            }
        ],
        "oras.cli.version": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.version.__author__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.version.__copyright__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.version.__license__",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.version.main",
                "modulename": "examples.compspec.version",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/version.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.version.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.version.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.version.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.version.main"
                    }
                ]
            }
        ],
        "oras.cli.pull": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.pull.__author__",
                "modulename": "examples.compspec.pull",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/pull.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.pull.__copyright__",
                "modulename": "examples.compspec.pull",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/pull.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.pull.__license__",
                "modulename": "examples.compspec.pull",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/pull.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.pull",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/pull.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.pull.main",
                "modulename": "examples.compspec.pull",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/pull.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)\n\nA wrapper around an oras client pull.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.pull.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.pull.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.pull.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.pull.main"
                    }
                ]
            }
        ],
        "oras.cli.help": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.help.__author__",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.help.__copyright__",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.help.__license__",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "login_help = \"\"\" Log in to a remote registry Example - Login with username and password from command line: oras-py login -u username -p password localhost:5000 Example - Login with username and password from stdin: oras-py login -u username --password-stdin localhost:5000 Example - Login with identity token from command line: oras-py login -p token localhost:5000 Example - Login with identity token from stdin: oras-py login --password-stdin localhost:5000 Example - Login with username and password by prompt: oras-py login localhost:5000 Example - Login with insecure registry from command line: oras-py login --insecure localhost:5000 \"\"\"",
                "fullname": "examples.compspec.help.login_help",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "copy_help = \"\"\"Copy artifacts from one location to another\", Example - Copy artifacts from local files to local files: oras copy foo/bar:v1 --from files --to files:path/to/save file1 file2 ... filen Example - Copy artifacts from registry to local files: oras copy foo/bar:v1 --from registry --to files:path/to/save Example - Copy artifacts from registry to oci: oras copy foo/bar:v1 --from registry --to oci:path/to/oci Example - Copy artifacts from local files to registry: oras copy foo/bar:v1 --from files --to registry file1 file2 ... filen When the source (--from) is \"files\", the config by default will be \"{}\" and of media type application/vnd.unknown.config.v1+json. You can override it by setting the path, for example: oras copy foo/bar:v1 --from files --manifest-config path/to/config:application/vnd.oci.image.config.v1+json --to files:path/to/save file1 file2 ... fileN\"\"\"",
                "fullname": "examples.compspec.help.copy_help",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "logout_help = \"\"\" Log out from a remote registry Example - Logout: oras-py logout localhost:5000 \"\"\"",
                "fullname": "examples.compspec.help.logout_help",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "push_help = \"\"\" Push files to remote registry Example - Push file \"hi.txt\" with the \"application/vnd.oci.image.layer.v1.tar\" media type (default): oras-py push localhost:5000/hello:latest hi.txt Example - Push file \"hi.txt\" with the custom \"application/vnd.me.hi\" media type: oras-py push localhost:5000/hello:latest hi.txt:application/vnd.me.hi Example - Push multiple files with different media types: oras-py push localhost:5000/hello:latest hi.txt:application/vnd.me.hi bye.txt:application/vnd.me.bye Example - Push file \"hi.txt\" with the custom manifest config \"config.json\" of the custom \"application/vnd.me.config\" media type: oras-py push --manifest-config config.json:application/vnd.me.config localhost:5000/hello:latest hi.txt Example - Push file to the insecure registry: oras-py push localhost:5000/hello:latest hi.txt --insecure Example - Push file to the HTTP registry: oras-py push localhost:5000/hello:latest hi.txt --plain-http \"\"\"",
                "fullname": "examples.compspec.help.push_help",
                "modulename": "examples.compspec.help",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/help.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.cli.login": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.login.__author__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.login.__copyright__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.login.__license__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.login.main",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)\n\nMain is a light wrapper around the login command.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.main"
                    }
                ]
            }
        ],
        "oras.cli.logout": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.logout.__author__",
                "modulename": "examples.compspec.logout",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logout.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.logout.__copyright__",
                "modulename": "examples.compspec.logout",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logout.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.logout.__license__",
                "modulename": "examples.compspec.logout",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logout.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.logout",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logout.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def main",
                "fullname": "examples.compspec.logout.main",
                "modulename": "examples.compspec.logout",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/logout.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "main(args, parser, extra, subparser)\n\nMain is a light wrapper around the logout command.",
                "parameters": [
                    {
                        "name": "args",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logout.main"
                    },
                    {
                        "name": "parser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logout.main"
                    },
                    {
                        "name": "extra",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logout.main"
                    },
                    {
                        "name": "subparser",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.logout.main"
                    }
                ]
            }
        ],
        "oras.main": [
            {
                "description": "module login",
                "fullname": "examples.compspec.login",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.main.login": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.login.__author__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.login.__copyright__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.login.__license__",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class DockerClient",
                "fullname": "examples.compspec.login.DockerClient",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "DockerClient()\n\nIf running inside a container (or similar without docker) do a manual login"
            },
            {
                "description": "def login",
                "fullname": "examples.compspec.login.login",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "login(username: Optional[str]=None, password: Optional[str]=None, password_stdin: bool=False, insecure: bool=False, hostname: Optional[str]=None, config_path: Optional[str]=None) -> dict\n\nLogin to an OCI registry.\n\nThe username and password can come from stdin.",
                "parameters": [
                    {
                        "name": "username",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "password",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "password_stdin",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login"
                    },
                    {
                        "name": "insecure",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login"
                    },
                    {
                        "name": "hostname",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "config_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.login.login",
                        "docstring": "NoneType()"
                    }
                ]
            },
            {
                "description": "def readline",
                "fullname": "examples.compspec.login.readline",
                "modulename": "examples.compspec.login",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/login.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "readline() -> str\n\nRead lines from stdin"
            }
        ],
        "oras.utils": [
            {
                "description": "module copyfile",
                "fullname": "examples.compspec.copyfile",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module extract_targz",
                "fullname": "examples.compspec.extract_targz",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module get_file_hash",
                "fullname": "examples.compspec.get_file_hash",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module get_size",
                "fullname": "examples.compspec.get_size",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module get_tmpdir",
                "fullname": "examples.compspec.get_tmpdir",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module get_tmpfile",
                "fullname": "examples.compspec.get_tmpfile",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module make_targz",
                "fullname": "examples.compspec.make_targz",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module mkdir_p",
                "fullname": "examples.compspec.mkdir_p",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module print_json",
                "fullname": "examples.compspec.print_json",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module read_file",
                "fullname": "examples.compspec.read_file",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module read_in_chunks",
                "fullname": "examples.compspec.read_in_chunks",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module read_json",
                "fullname": "examples.compspec.read_json",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module recursive_find",
                "fullname": "examples.compspec.recursive_find",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module write_file",
                "fullname": "examples.compspec.write_file",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module write_json",
                "fullname": "examples.compspec.write_json",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module append_url_params",
                "fullname": "examples.compspec.append_url_params",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module find_docker_config",
                "fullname": "examples.compspec.find_docker_config",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module get_docker_client",
                "fullname": "examples.compspec.get_docker_client",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module iter_localhosts",
                "fullname": "examples.compspec.iter_localhosts",
                "modulename": "examples.compspec",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/__init__.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            }
        ],
        "oras.utils.request": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.request.__author__",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.request.__copyright__",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.request.__license__",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module urlparse",
                "fullname": "urllib.parse",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zawinski, July 1998.\n\nRFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior."
            },
            {
                "description": "def urlencode",
                "fullname": "urllib.parse.urlencode",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "urlencode(query: Union[Mapping[Any, Any], Mapping[Any, Sequence[Any]], Sequence[Tuple[Any, Any]], Sequence[Tuple[Any, Sequence[Any]]]], doseq: bool=..., safe: AnyStr=..., encoding: str=..., errors: str=..., quote_via: Callable[[str, AnyStr, str, str], str]=...) -> str\n\nEncode a dict or sequence of two-element tuples into a URL query string.\n\nIf any values in the query arg are sequences and doseq is true, each\nsequence element is converted to a separate parameter.\n\nIf the query arg is a sequence of two-element tuples, the order of the\nparameters in the output will match the order of parameters in the\ninput.\n\nThe components of a query arg may each be either a string or a bytes type.\n\nThe safe, encoding, and errors parameters are passed down to the function\nspecified by quote_via (encoding and errors only if a component is a str).",
                "parameters": [
                    {
                        "name": "query",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    },
                    {
                        "name": "doseq",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    },
                    {
                        "name": "safe",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    },
                    {
                        "name": "encoding",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    },
                    {
                        "name": "errors",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    },
                    {
                        "name": "quote_via",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "urllib.parse.urlencode"
                    }
                ]
            },
            {
                "description": "def iter_localhosts",
                "fullname": "examples.compspec.request.iter_localhosts",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "iter_localhosts(name: str)\n\nGiven a url with localhost, always resolve to 127.0.0.1.\n\n:param name : the name of the original host string\n:type name: str",
                "parameters": [
                    {
                        "name": "name",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.request.iter_localhosts"
                    }
                ]
            },
            {
                "description": "def find_docker_config",
                "fullname": "examples.compspec.request.find_docker_config",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "find_docker_config(exists: bool=True)\n\nReturn the docker default config path.",
                "parameters": [
                    {
                        "name": "exists",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.request.find_docker_config"
                    }
                ]
            },
            {
                "description": "def append_url_params",
                "fullname": "examples.compspec.request.append_url_params",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "append_url_params(url: str, params: dict) -> str\n\nGiven a dictionary of params and a url, parse the url and add extra params.\n\n:param url: the url string to parse\n:type url: str\n:param params: parameters to add\n:type params: dict",
                "parameters": [
                    {
                        "name": "url",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.request.append_url_params"
                    },
                    {
                        "name": "params",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.request.append_url_params"
                    }
                ]
            },
            {
                "description": "def get_docker_client",
                "fullname": "examples.compspec.request.get_docker_client",
                "modulename": "examples.compspec.request",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/request.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_docker_client(insecure: bool=False, **kwargs)\n\nGet a docker client.\n\n:param tls : enable tls\n:type tls: bool",
                "parameters": [
                    {
                        "name": "insecure",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.request.get_docker_client"
                    },
                    {
                        "name": "kwargs",
                        "type": "param",
                        "kind": "VAR_KEYWORD",
                        "order": 4,
                        "signature": "examples.compspec.request.get_docker_client"
                    }
                ]
            }
        ],
        "oras.utils.fileio": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.fileio.__author__",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.fileio.__copyright__",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.fileio.__license__",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module errno",
                "fullname": "errno",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module makes available standard errno system symbols.\n\nThe value of each symbol is the corresponding integer value,\ne.g., on most systems, errno.ENOENT equals the integer 2.\n\nThe dictionary errno.errorcode maps numeric codes to symbol names,\ne.g., errno.errorcode[2] could be the string 'ENOENT'.\n\nSymbols that are not relevant to the underlying system are not defined.\n\nTo map error codes to error messages, use the function os.strerror(),\ne.g. os.strerror(2) could return 'No such file or directory'."
            },
            {
                "description": "module hashlib",
                "fullname": "hashlib",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module io",
                "fullname": "io",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "The io module provides the Python interfaces to stream handling. The\nbuiltin open function is defined in this module.\n\nAt the top of the I/O hierarchy is the abstract base class IOBase. It\ndefines the basic interface to a stream. Note, however, that there is no\nseparation between reading and writing to streams; implementations are\nallowed to raise an OSError if they do not support a given operation.\n\nExtending IOBase is RawIOBase which deals simply with the reading and\nwriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\nan interface to OS files.\n\nBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\nsubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\nstreams that are readable, writable, and both respectively.\nBufferedRandom provides a buffered interface to random access\nstreams. BytesIO is a simple stream of in-memory bytes.\n\nAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\nof streams into text. TextIOWrapper, which extends it, is a buffered text\ninterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\nis an in-memory stream for text.\n\nArgument names are not part of the specification, and only the arguments\nof open() are intended to be used as keyword arguments.\n\ndata:\n\nDEFAULT_BUFFER_SIZE\n\n   An int containing the default buffer size used by the module's buffered\n   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\n   possible."
            },
            {
                "description": "module json",
                "fullname": "json",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "JSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n:mod:`json` exposes an API familiar to users of the standard library\n:mod:`marshal` and :mod:`pickle` modules.  It is derived from a\nversion of the externally maintained simplejson library.\n\nEncoding basic Python object hierarchies::\n\n    >>> import json\n    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n    '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n    >>> print(json.dumps(\"\\\"foo\\bar\"))\n    \"\\\"foo\\bar\"\n    >>> print(json.dumps('\\u1234'))\n    \"\\u1234\"\n    >>> print(json.dumps('\\\\'))\n    \"\\\\\"\n    >>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n    {\"a\": 0, \"b\": 0, \"c\": 0}\n    >>> from io import StringIO\n    >>> io = StringIO()\n    >>> json.dump(['streaming API'], io)\n    >>> io.getvalue()\n    '[\"streaming API\"]'\n\nCompact encoding::\n\n    >>> import json\n    >>> mydict = {'4': 5, '6': 7}\n    >>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n    '[1,2,3,{\"4\":5,\"6\":7}]'\n\nPretty printing::\n\n    >>> import json\n    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n    {\n        \"4\": 5,\n        \"6\": 7\n    }\n\nDecoding JSON::\n\n    >>> import json\n    >>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n    >>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\n    True\n    >>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\n    True\n    >>> from io import StringIO\n    >>> io = StringIO('[\"streaming API\"]')\n    >>> json.load(io)[0] == 'streaming API'\n    True\n\nSpecializing JSON object decoding::\n\n    >>> import json\n    >>> def as_complex(dct):\n    ...     if '__complex__' in dct:\n    ...         return complex(dct['real'], dct['imag'])\n    ...     return dct\n    ...\n    >>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\n    True\n\nSpecializing JSON object encoding::\n\n    >>> import json\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n    ...                     f'is not JSON serializable')\n    ...\n    >>> json.dumps(2 + 1j, default=encode_complex)\n    '[2.0, 1.0]'\n    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n    '[2.0, 1.0]'\n    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n    '[2.0, 1.0]'\n\n\nUsing json.tool from the shell to validate and pretty-print::\n\n    $ echo '{\"json\":\"obj\"}' | python -m json.tool\n    {\n        \"json\": \"obj\"\n    }\n    $ echo '{ 1.2:3.4}' | python -m json.tool\n    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)"
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module pathlib",
                "fullname": "pathlib",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module re",
                "fullname": "re",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'."
            },
            {
                "description": "module shutil",
                "fullname": "shutil",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac."
            },
            {
                "description": "module stat",
                "fullname": "stat",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *"
            },
            {
                "description": "module tarfile",
                "fullname": "tarfile",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Read from and write to tar format archives."
            },
            {
                "description": "module tempfile",
                "fullname": "tempfile",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Temporary files.\n\nThis module provides generic, low- and high-level interfaces for\ncreating temporary files and directories.  All of the interfaces\nprovided by this module can be used without fear of race conditions\nexcept for 'mktemp'.  'mktemp' is subject to race conditions and\nshould not be used; it is provided for backward compatibility only.\n\nThe default path names are returned as str.  If you supply bytes as\ninput, all return values will be in bytes.  Ex:\n\n    >>> tempfile.mkstemp()\n    (4, '/tmp/tmptpu9nin8')\n    >>> tempfile.mkdtemp(suffix=b'')\n    b'/tmp/tmppbi8f0hy'\n\nThis module also provides some data items to the user:\n\n  TMP_MAX  - maximum number of names that will be tried before\n             giving up.\n  tempdir  - If this is set to a string before the first use of\n             any routine from this module, it will be considered as\n             another candidate location to store temporary files."
            },
            {
                "description": "class Generator",
                "fullname": "typing.Generator",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Generator()"
            },
            {
                "description": "class Optional",
                "fullname": "typing.Optional",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "class TextIO",
                "fullname": "typing.TextIO",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false,
                "docstring": "TextIO()\n\nTyped version of the return of open() in text mode."
            },
            {
                "description": "class Union",
                "fullname": "typing.Union",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "class",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module logger",
                "fullname": "oras.logger.logger",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def make_targz",
                "fullname": "examples.compspec.fileio.make_targz",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "make_targz(source_dir: str, dest_name: Optional[str]=None) -> str\n\nMake a targz (compressed) archive from a source directory.",
                "parameters": [
                    {
                        "name": "source_dir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.make_targz"
                    },
                    {
                        "name": "dest_name",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.make_targz",
                        "docstring": "NoneType()"
                    }
                ]
            },
            {
                "description": "def extract_targz",
                "fullname": "examples.compspec.fileio.extract_targz",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "extract_targz(targz: str, outdir: str) -> str\n\nExtract a .tar.gz to an output directory.",
                "parameters": [
                    {
                        "name": "targz",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.extract_targz"
                    },
                    {
                        "name": "outdir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.extract_targz"
                    }
                ]
            },
            {
                "description": "def get_size",
                "fullname": "examples.compspec.fileio.get_size",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_size(path: str) -> int\n\nGet the size of a blob\n\n:param path : the path to get the size for\n:type path: str",
                "parameters": [
                    {
                        "name": "path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_size"
                    }
                ]
            },
            {
                "description": "def get_file_hash",
                "fullname": "examples.compspec.fileio.get_file_hash",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_file_hash(path: str, algorithm: str=\"sha256\") -> str\n\nReturn an sha256 hash of the file based on an algorithm\n\n:param path: the path to get the size for\n:type path: str\n:param algorithm: the algorithm to use\n:type algorithm: str",
                "parameters": [
                    {
                        "name": "path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_file_hash"
                    },
                    {
                        "name": "algorithm",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_file_hash"
                    }
                ]
            },
            {
                "description": "def mkdir_p",
                "fullname": "examples.compspec.fileio.mkdir_p",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "mkdir_p(path: str)\n\nMake a directory path if it does not exist, akin to mkdir -p\n\n:param path : the path to create\n:type path: str",
                "parameters": [
                    {
                        "name": "path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.mkdir_p"
                    }
                ]
            },
            {
                "description": "def get_tmpfile",
                "fullname": "examples.compspec.fileio.get_tmpfile",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_tmpfile(tmpdir: Optional[str]=None, prefix: str=\"\", suffix: str=\"\") -> str\n\nGet a temporary file with an optional prefix.\n\n:param tmpdir : an optional temporary directory\n:type tmpdir: str\n:param prefix: an optional prefix for the temporary path\n:type prefix: str\n:param suffix: an optional suffix (extension)\n:type suffix: str",
                "parameters": [
                    {
                        "name": "tmpdir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpfile",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "prefix",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpfile"
                    },
                    {
                        "name": "suffix",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpfile"
                    }
                ]
            },
            {
                "description": "def get_tmpdir",
                "fullname": "examples.compspec.fileio.get_tmpdir",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "get_tmpdir(tmpdir: Optional[str]=None, prefix: Optional[str]=\"\", create: bool=True) -> str\n\nGet a temporary directory for an operation.\n\n:param tmpdir: an optional temporary directory\n:type tmpdir: str\n:param prefix: an optional prefix for the temporary path\n:type prefix: str\n:param create: create the directory\n:type create: bool",
                "parameters": [
                    {
                        "name": "tmpdir",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpdir",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "prefix",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpdir",
                        "docstring": "NoneType()"
                    },
                    {
                        "name": "create",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.get_tmpdir"
                    }
                ]
            },
            {
                "description": "def recursive_find",
                "fullname": "examples.compspec.fileio.recursive_find",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "recursive_find(base: str, pattern: str=None) -> Generator\n\nFind filenames that match a particular pattern, and yield them.\n\n:param base    : the root to search\n:type base: str\n:param pattern: an optional file pattern to use with fnmatch\n:type pattern: str",
                "parameters": [
                    {
                        "name": "base",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.recursive_find"
                    },
                    {
                        "name": "pattern",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.recursive_find"
                    }
                ]
            },
            {
                "description": "def copyfile",
                "fullname": "examples.compspec.fileio.copyfile",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "copyfile(source: str, destination: str, force: bool=True) -> str\n\nCopy a file from a source to its destination.\n\n:param source: the source to copy from\n:type source: str\n:param destination: the destination to copy to\n:type destination: str\n:param force: force copy if destination already exists\n:type force: bool",
                "parameters": [
                    {
                        "name": "source",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.copyfile"
                    },
                    {
                        "name": "destination",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.copyfile"
                    },
                    {
                        "name": "force",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.copyfile"
                    }
                ]
            },
            {
                "description": "def write_file",
                "fullname": "examples.compspec.fileio.write_file",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "write_file(filename: str, content: str, mode: str=\"w\", make_exec: bool=False) -> str\n\nWrite content to a filename\n\n:param filename: filname to write\n:type filename: str\n:param content: content to write\n:type content: str\n:param mode: mode to write\n:type mode: str\n:param make_exec: make executable\n:type make_exec: bool",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_file"
                    },
                    {
                        "name": "content",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_file"
                    },
                    {
                        "name": "mode",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_file"
                    },
                    {
                        "name": "make_exec",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_file"
                    }
                ]
            },
            {
                "description": "def read_in_chunks",
                "fullname": "examples.compspec.fileio.read_in_chunks",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "read_in_chunks(image: Union[TextIO, io.BufferedReader], chunk_size: int=1024)\n\nHelper function to read file in chunks, with default size 1k.\n\n:param image: file descriptor\n:type image: TextIO or io.BufferedReader\n:param chunk_size: size of the chunk\n:type chunk_size: int",
                "parameters": [
                    {
                        "name": "image",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_in_chunks"
                    },
                    {
                        "name": "chunk_size",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_in_chunks"
                    }
                ]
            },
            {
                "description": "def write_json",
                "fullname": "examples.compspec.fileio.write_json",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "write_json(json_obj: dict, filename: str, mode: str=\"w\") -> str\n\nWrite json to a filename\n\n:param json_obj: json object to write\n:type json_obj: dict\n:param filename: filename to write\n:type filename: str\n:param mode: mode to write\n:type mode: str",
                "parameters": [
                    {
                        "name": "json_obj",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_json"
                    },
                    {
                        "name": "filename",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_json"
                    },
                    {
                        "name": "mode",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.write_json"
                    }
                ]
            },
            {
                "description": "def print_json",
                "fullname": "examples.compspec.fileio.print_json",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "print_json(json_obj: dict) -> str\n\nPretty print json.\n\n:param json_obj: json object to print\n:type json_obj: dict",
                "parameters": [
                    {
                        "name": "json_obj",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.print_json"
                    }
                ]
            },
            {
                "description": "def read_file",
                "fullname": "examples.compspec.fileio.read_file",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "read_file(filename: str, mode: str=\"r\") -> str\n\nRead a file.\n\n:param filename: filename to read\n:type filename: str\n:param mode: mode to read\n:type mode: str",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_file"
                    },
                    {
                        "name": "mode",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_file"
                    }
                ]
            },
            {
                "description": "def read_json",
                "fullname": "examples.compspec.fileio.read_json",
                "modulename": "examples.compspec.fileio",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/fileio.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "read_json(filename: str, mode: str=\"r\") -> dict\n\nRead a json file to a dictionary.\n\n:param filename: filename to read\n:type filename: str\n:param mode: mode to read\n:type mode: str",
                "parameters": [
                    {
                        "name": "filename",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_json"
                    },
                    {
                        "name": "mode",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.fileio.read_json"
                    }
                ]
            }
        ],
        "oras.tests.test_oras": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.test_oras.__author__",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.test_oras.__copyright__",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.test_oras.__license__",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module shutil",
                "fullname": "shutil",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac."
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "module pytest",
                "fullname": "pytest",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "here = os.path.abspath(os.path.dirname(__file__))",
                "fullname": "examples.compspec.test_oras.here",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "registry_host = os.environ.get(\"ORAS_HOST\")",
                "fullname": "examples.compspec.test_oras.registry_host",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "registry_port = os.environ.get(\"ORAS_PORT\")",
                "fullname": "examples.compspec.test_oras.registry_port",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "with_auth = os.environ.get(\"ORAS_AUTH\") == \"true\"",
                "fullname": "examples.compspec.test_oras.with_auth",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false,
                "parameters": [
                    {
                        "name": "x",
                        "type": "param",
                        "kind": "POSITIONAL_ONLY",
                        "order": 0,
                        "signature": "builtins.bool"
                    },
                    {
                        "name": "x",
                        "type": "param",
                        "kind": "POSITIONAL_ONLY",
                        "order": 0,
                        "signature": "builtins.bool"
                    }
                ]
            },
            {
                "description": "oras_user = os.environ.get(\"ORAS_USER\", \"myuser\")",
                "fullname": "examples.compspec.test_oras.oras_user",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "oras_pass = os.environ.get(\"ORAS_PASS\", \"mypass\")",
                "fullname": "examples.compspec.test_oras.oras_pass",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def setup_module",
                "fullname": "examples.compspec.test_oras.setup_module",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "setup_module(module)\n\nEnsure the registry port and host is in the environment.",
                "parameters": [
                    {
                        "name": "module",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_oras.setup_module"
                    }
                ]
            },
            {
                "description": "registry = f\"{registry_host}:{registry_port}\"",
                "fullname": "examples.compspec.test_oras.registry",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "target = f\"{registry}/dinosaur/artifact:v1\"",
                "fullname": "examples.compspec.test_oras.target",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "target_dir = f\"{registry}/dinosaur/directory:v1\"",
                "fullname": "examples.compspec.test_oras.target_dir",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def test_basic_oras",
                "fullname": "examples.compspec.test_oras.test_basic_oras",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_basic_oras()\n\nBasic tests for oras (without authentication)"
            },
            {
                "description": "def test_login_logout",
                "fullname": "examples.compspec.test_oras.test_login_logout",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_login_logout()\n\nLogin and logout are all we can test with basic auth!"
            },
            {
                "description": "def test_basic_push_pull",
                "fullname": "examples.compspec.test_oras.test_basic_push_pull",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_basic_push_pull(tmp_path)\n\nBasic tests for oras (without authentication)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_oras.test_basic_push_pull"
                    }
                ]
            },
            {
                "description": "def test_directory_push_pull",
                "fullname": "examples.compspec.test_oras.test_directory_push_pull",
                "modulename": "examples.compspec.test_oras",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_oras.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_directory_push_pull(tmp_path)\n\nTest push and pull for directory",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_oras.test_directory_push_pull"
                    }
                ]
            }
        ],
        "oras.tests": [],
        "oras.tests.test_utils": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.test_utils.__author__",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.test_utils.__copyright__",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.test_utils.__license__",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module json",
                "fullname": "json",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "JSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n:mod:`json` exposes an API familiar to users of the standard library\n:mod:`marshal` and :mod:`pickle` modules.  It is derived from a\nversion of the externally maintained simplejson library.\n\nEncoding basic Python object hierarchies::\n\n    >>> import json\n    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n    '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n    >>> print(json.dumps(\"\\\"foo\\bar\"))\n    \"\\\"foo\\bar\"\n    >>> print(json.dumps('\\u1234'))\n    \"\\u1234\"\n    >>> print(json.dumps('\\\\'))\n    \"\\\\\"\n    >>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n    {\"a\": 0, \"b\": 0, \"c\": 0}\n    >>> from io import StringIO\n    >>> io = StringIO()\n    >>> json.dump(['streaming API'], io)\n    >>> io.getvalue()\n    '[\"streaming API\"]'\n\nCompact encoding::\n\n    >>> import json\n    >>> mydict = {'4': 5, '6': 7}\n    >>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n    '[1,2,3,{\"4\":5,\"6\":7}]'\n\nPretty printing::\n\n    >>> import json\n    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n    {\n        \"4\": 5,\n        \"6\": 7\n    }\n\nDecoding JSON::\n\n    >>> import json\n    >>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n    >>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\n    True\n    >>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\n    True\n    >>> from io import StringIO\n    >>> io = StringIO('[\"streaming API\"]')\n    >>> json.load(io)[0] == 'streaming API'\n    True\n\nSpecializing JSON object decoding::\n\n    >>> import json\n    >>> def as_complex(dct):\n    ...     if '__complex__' in dct:\n    ...         return complex(dct['real'], dct['imag'])\n    ...     return dct\n    ...\n    >>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\n    True\n\nSpecializing JSON object encoding::\n\n    >>> import json\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n    ...                     f'is not JSON serializable')\n    ...\n    >>> json.dumps(2 + 1j, default=encode_complex)\n    '[2.0, 1.0]'\n    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n    '[2.0, 1.0]'\n    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n    '[2.0, 1.0]'\n\n\nUsing json.tool from the shell to validate and pretty-print::\n\n    $ echo '{\"json\":\"obj\"}' | python -m json.tool\n    {\n        \"json\": \"obj\"\n    }\n    $ echo '{ 1.2:3.4}' | python -m json.tool\n    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)"
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module shutil",
                "fullname": "shutil",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac."
            },
            {
                "description": "module pytest",
                "fullname": "pytest",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module utils",
                "fullname": "oras.utils",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def test_write_read_files",
                "fullname": "examples.compspec.test_utils.test_write_read_files",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_write_read_files(tmp_path)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_utils.test_write_read_files"
                    }
                ]
            },
            {
                "description": "def test_write_bad_json",
                "fullname": "examples.compspec.test_utils.test_write_bad_json",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_write_bad_json(tmp_path)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_utils.test_write_bad_json"
                    }
                ]
            },
            {
                "description": "def test_write_json",
                "fullname": "examples.compspec.test_utils.test_write_json",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_write_json(tmp_path)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_utils.test_write_json"
                    }
                ]
            },
            {
                "description": "def test_copyfile",
                "fullname": "examples.compspec.test_utils.test_copyfile",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_copyfile(tmp_path)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_utils.test_copyfile"
                    }
                ]
            },
            {
                "description": "def test_get_tmpdir_tmpfile",
                "fullname": "examples.compspec.test_utils.test_get_tmpdir_tmpfile",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_get_tmpdir_tmpfile()"
            },
            {
                "description": "def test_mkdir_p",
                "fullname": "examples.compspec.test_utils.test_mkdir_p",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_mkdir_p(tmp_path)",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_utils.test_mkdir_p"
                    }
                ]
            },
            {
                "description": "def test_print_json",
                "fullname": "examples.compspec.test_utils.test_print_json",
                "modulename": "examples.compspec.test_utils",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_utils.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_print_json()"
            }
        ],
        "oras.tests.test_provider": [
            {
                "description": "__author__ = \"Vanessa Sochat\"",
                "fullname": "examples.compspec.test_provider.__author__",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__copyright__ = \"Copyright The ORAS Authors.\"",
                "fullname": "examples.compspec.test_provider.__copyright__",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "__license__ = \"Apache-2.0\"",
                "fullname": "examples.compspec.test_provider.__license__",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module os",
                "fullname": "os",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join)."
            },
            {
                "description": "module sys",
                "fullname": "sys",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false,
                "docstring": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function"
            },
            {
                "description": "module pytest",
                "fullname": "pytest",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "module oras",
                "fullname": "oras",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "module",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "here = os.path.abspath(os.path.dirname(__file__))",
                "fullname": "examples.compspec.test_provider.here",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "registry_host = os.environ.get(\"ORAS_HOST\")",
                "fullname": "examples.compspec.test_provider.registry_host",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "registry_port = os.environ.get(\"ORAS_PORT\")",
                "fullname": "examples.compspec.test_provider.registry_port",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "with_auth = os.environ.get(\"ORAS_AUTH\") == \"true\"",
                "fullname": "examples.compspec.test_provider.with_auth",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false,
                "parameters": [
                    {
                        "name": "x",
                        "type": "param",
                        "kind": "POSITIONAL_ONLY",
                        "order": 0,
                        "signature": "builtins.bool"
                    },
                    {
                        "name": "x",
                        "type": "param",
                        "kind": "POSITIONAL_ONLY",
                        "order": 0,
                        "signature": "builtins.bool"
                    }
                ]
            },
            {
                "description": "oras_user = os.environ.get(\"ORAS_USER\", \"myuser\")",
                "fullname": "examples.compspec.test_provider.oras_user",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "oras_pass = os.environ.get(\"ORAS_PASS\", \"mypass\")",
                "fullname": "examples.compspec.test_provider.oras_pass",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def setup_module",
                "fullname": "examples.compspec.test_provider.setup_module",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "setup_module(module)\n\nEnsure the registry port and host is in the environment.",
                "parameters": [
                    {
                        "name": "module",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_provider.setup_module"
                    }
                ]
            },
            {
                "description": "registry = f\"{registry_host}:{registry_port}\"",
                "fullname": "examples.compspec.test_provider.registry",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "target = f\"{registry}/dinosaur/artifact:v1\"",
                "fullname": "examples.compspec.test_provider.target",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "target_dir = f\"{registry}/dinosaur/directory:v1\"",
                "fullname": "examples.compspec.test_provider.target_dir",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "statement",
                "is_definition": true,
                "is_stub": false
            },
            {
                "description": "def test_annotated_registry_push",
                "fullname": "examples.compspec.test_provider.test_annotated_registry_push",
                "modulename": "examples.compspec.test_provider",
                "modulepath": "/home/vanessa/Desktop/Code/compspec/caliper/examples/compspec/test_provider.py",
                "type": "function",
                "is_definition": true,
                "is_stub": false,
                "docstring": "test_annotated_registry_push(tmp_path)\n\nBasic tests for oras push with annotations",
                "parameters": [
                    {
                        "name": "tmp_path",
                        "type": "param",
                        "kind": "POSITIONAL_OR_KEYWORD",
                        "order": 1,
                        "signature": "examples.compspec.test_provider.test_annotated_registry_push"
                    }
                ]
            }
        ]
    }
}
